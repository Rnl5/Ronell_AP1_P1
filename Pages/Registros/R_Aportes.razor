@page "/registroAportes"

@inject AportesBLL aportesBLL
@inject NotificationService notificationService

<PageTitle>Registro de Aportes</PageTitle>

<EditForm model ="Aportes" OnValidSubmit="Guardar">
<DataAnnotationsValidator/>

    <div class ="container">
        <div class ="card">
            <div class="card-header">
                <h1>Registro de Aportes</h1>
            </div>
            
            <body>
                <div class = "card-body">
                    <div class ="row">
                        <div class="col">
                            <div class="input-group-mb-3">
                                <label>Aporte Id:</label>
                                <InputNumber @bind-Value="aportes.AporteId" class ="form-control" aria-describedby="BotonId"></InputNumber>
                                <button type ="button" @onclick="Buscar"class ="btn btn-outline-primary"><i class ="oi oi-magnifying-glass"></i></button>
                            </div>
                        </div>

                        <div class = "input-group-mb-3">
                            <label>Fecha:</label>
                            <InputDate class = "form-control" aria-describedby="Fecha" @bind-Value ="aportes.Fecha"></InputDate>
                            <ValidationMessage For ="@(() => aportes.Fecha)"></ValidationMessage>
                        </div>

                        <div class ="input-group-mb-3">
                            <label>Persona:</label>
                            <InputText @bind-Value="aportes.Persona" class ="form-control" aria-describedby="Persona" ></InputText>
                            <ValidationMessage For ="@(() => aportes.Persona)"></ValidationMessage>
                        </div>

                        <div class="input-group-mb-3">
                            <label>Observaci&oacute;n</label>
                            <InputTextArea @bind-Value="aportes.Observacion" class ="form-control" aria-describedby="Observacion" ></InputTextArea>
                            <ValidationMessage For ="@(() => aportes.Observacion)"></ValidationMessage>
                        </div>

                        <div class ="input-group-mb-3">
                            <label>Monto:</label>
                            <InputNumber @bind-Value="aportes.Monto" class= "form-control" aria-describedby="Monto"></InputNumber>
                            <ValidationMessage For = "@(() => aportes.Monto)"></ValidationMessage>
                        </div>

                        <div class ="btn btn-group">
                            <button type ="button" @onclick="Nuevo" class ="btn btn-outline-primary">Nuevo <i class ="oi-oi-file"></i></button>
                            <button type ="submit" @onclick="Guardar" class ="btn btn-outline-success">Guardar <i class="oi oi-document"></i></button>
                            <button type ="button" @onclick="Eliminar" class ="btn btn-outline-danger">Eliminar <i class="oi oi-trash"></i></button>
                        </div>
                    </div>
                </div>
            </body>
        </div>
    </div>
</EditForm>




@code
{

    [Parameter]
    public int AporteId{get; set;}

    public Aportes aportes{get; set;} = new Aportes();

    public NotificationMessage? mensaje {get; set;}

    protected override void OnInitialized()
    {
        aportes.AporteId = AporteId;
    }

    public void Nuevo()
    {
        aportes = new Aportes();
    }

    public void Buscar()
    {
        var aporteEncontrado = aportesBLL.Buscar(aportes.AporteId);

        if(aporteEncontrado != null)
        {
            aportes = aporteEncontrado;
        }
    }

    public void Guardar()
    {

        if(!Validar() && !CasillasVacias() && aportesBLL.Guardar(aportes) && !aportesBLL.ExistenDatos(aportes))
        {
            Nuevo();
            mensaje = new NotificationMessage
            {
            Severity = NotificationSeverity.Success,
            Summary = "Guardado Exitoso",
            Detail = "Se ha guardado correctamente el ingreso",
            Duration = 4_000
            };
        notificationService.Notify(mensaje);
        }

        else if(CasillasVacias())
        {
           mensaje = new NotificationMessage
            {
            Severity = NotificationSeverity.Error,
            Summary = "Error, hay una o varias casillas vacias",
            Detail = "Revise si ha rellenado todas las casillas",
            Duration = 4_000
            };
        notificationService.Notify(mensaje); 
        }

        else if(aportesBLL.ExistenDatos(aportes))
        {
            mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Por favor, alguno de los datos ya se encuentran en la base de datos o la fecha es incorrecta",
                Duration = 4_000
            };
        notificationService.Notify(mensaje);
        }
        else if(Validar())
        {
            mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error en la validacion de de los datos",
                Detail = "Por favor, revise que todo este en orden",
                Duration = 4_000
            };
        notificationService.Notify(mensaje);
        }
    }
    
    public void Eliminar()
    {
        Buscar();
        if(aportesBLL.Eliminar(aportes))
        {
            Nuevo();

            mensaje = new NotificationMessage
            {
            Severity = NotificationSeverity.Error,
            Summary = "Exito al eliminar",
            Detail = "Se ha eliminado correctamente el ingreso",
            Duration = 4_000
            };
        notificationService.Notify(mensaje);
        }
    }

    public void MostrarNotificacion()
    {
        mensaje = new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Notificacion Ejemplo",
            Detail = "Esta es una prueba de notification service",
            Duration = 4_000
        };
        notificationService.Notify(mensaje);
    }

    public bool Validar()
    {
        return aportes.Fecha > DateTime.Now ||
           aportes.Monto <= 0;
    }

    public bool CasillasVacias()
    {
        return string.IsNullOrWhiteSpace(aportes.Persona) ||
        string.IsNullOrWhiteSpace(aportes.Observacion) ||
        aportes.Monto <= 0;
    }


}